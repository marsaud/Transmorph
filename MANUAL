====== Transmorph Manual : Introduction ======
 

Transmorph is a software component written in PHP 5. Its purpose is to provide
 data structure transformation and processing, driven by "rules" in a special 
format.

All necessary documentation for development with Transmorph is available in the 
source code documentation, which respects PhpDocumentor format.

This manual documents the transformation rule format Transmorph lies onto.

====== The transformation rule format ======


A transformation rule consists of a //read-rule// linked to a //write-rule// 
with the '>>' symbol surrounded by single white spaces.

<code>
read-rule >> write-rule
</code>

Transmorph exploits the read-rules to read values out of input data structures, 
optionally process these values, and finally uses the linked write-rules to 
write the final values in an output data structure.

The read-rule handling is done by a sub-component called Transmorph_Reader, the 
write-rule handling is done by a sub-component called Transmorph_Writer.

NOTICE : 
The [[http://www.php.net/manual/en/language.types.resource.php|resource]] type 
is not handled by Transmorph. Giving an input structure containing resource type
 values will throw a particular Exception.

===== The read-rules =====


A read-rule can be of 3 types :
  * Constant rule.
  * Simple read-rule.
  * Complex read-rule.

==== Constant rule ====


A constant rule consists of '\' symbol followed by a value.

<code>
\constant-value
</code>

A constant rule is evaluated as the value written after the '\'.

==== Simple read-rule ====


A simple read-rule consists of a path the Transmorph_Reader will follow to get a
 value in a PHP variable we will call the "input". The path is expressed by a 
sequence of rule nodes. The rule nodes are of 2 kinds :

  * Array nodes :

<code>
/array-key
</code>

  * Object nodes :

<code>
.object-property
</code>

Starting at the "top" of a the input, Transmorph_Reader will follow the sequence
 of rule nodes by trying to evaluate array keys or object attributes depending 
on the type of rule node encountered. When there are no more rule nodes left, 
Transmorph_Reader returns its last evaluation.

==== Complex read-rule ====


Complex read-rules provide data processing based on callbacks. A complex 
read-rule consists of a callback name followed by a pair of parenthesis 
encapsulating a coma separated list of parameters.

<code>
callback(parameter1,parameter2,...)
</code>

The point is on parameters. A parameter is...a read-rule. Any of constant, 
simple or complex read-rule. Complex read-rules stacking is not functionally 
limited.

===== The write rules =====


A write-rule consists of a path the Transmorph_Writer will follow to write 
values in a PHP variable we will call the "output". The path is expressed by a 
sequence of rule nodes. The rule nodes are of 2 kinds :

  * Array nodes :

<code>
/array-key
</code>

If ''array-key'' is “”  (the null string), then a new entry  will be created and
appened to the array.

  * Object nodes :

<code>
.object-property
</code>

Starting at the "top" of a the output, Transmorph_Writer will follow the 
sequence of rule nodes, creating, if necessary, array keys or object attributes 
depending on the type of rule node encountered. When there are no more rule 
nodes left, Transmorph_Writer writes a value in the last encountered/created 
node.

Finally, there  is the special  rule “” (null  string) which designate  the root
(“top”) of the output.

===== Examples =====

All examples in this MANUAL can be found as executable PHP code in the Sample 
folder shipped with Transmorph.

==== Example 1 : simple read-rule with array rule-nodes ====


  * The input :

<code php>
array(4) {
  [0]=>
  string(4) "zero"
  [1]=>
  string(3) "one"
  ["one"]=>
  int(1)
  ["two"]=>
  int(2)
}
</code>

  * The rules :

<code>
/0 >> /A
/1 >> /B
/one >> /C
/two >> /D
</code>

  * The output :

<code php>
array(4) {
  ["A"]=>
  string(4) "zero"
  ["B"]=>
  string(3) "one"
  ["C"]=>
  int(1)
  ["D"]=>
  int(2)
}
</code>

==== Example 2 : simple read-rule with object rule-nodes ====


  * The input :

<code php>
object(stdClass)#1 (2) {
  ["one"]=>
  int(1)
  ["two"]=>
  int(2)
}
</code>

  * The rules :

<code>
.one >> .lower
.two >> .upper
</code>

  * The output :

<code php>
object(stdClass)#6 (2) {
  ["lower"]=>
  int(1)
  ["upper"]=>
  int(2)
}
</code>

==== Example 3 : array nodes, object nodes and constant rule ====


  * The input :

<code php>
object(stdClass)#1 (2) {
  ["first"]=>
  array(2) {
    [0]=>
    string(4) "zero"
    [1]=>
    string(3) "one"
  }
  ["second"]=>
  array(1) {
    [3]=>
    string(5) "three"
  }
}
</code>

  * The rules :

<code>
.first/0 >> /a.foo
.first/1 >> /a.bar
\2 >> /b.baz
.second/3 >> /b.zzz
</code>

  * The output :

<code php>
array(2) {
  ["a"]=>
  object(stdClass)#6 (2) {
    ["foo"]=>
    string(4) "zero"
    ["bar"]=>
    string(3) "one"
  }
  ["b"]=>
  object(stdClass)#7 (2) {
    ["baz"]=>
    string(1) "2"
    ["zzz"]=>
    string(5) "three"
  }
}
</code>

==== Example 4 : complex read-rule with callbacks ====


  * The input :

<code php>
object(stdClass)#1 (2) {
  ["words"]=>
  array(3) {
    [0]=>
    string(4) "From"
    [1]=>
    string(5) "Input"
    [2]=>
    string(6) "Output"
  }
  ["numbers"]=>
  array(1) {
    ["single"]=>
    int(1)
  }
}
</code>

  * The callbacks :

<code php>
function double($i)
{
    return $i * 2;
}

function concat($a, $b)
{
    return $a . $b;
}
</code>

  * The rules :

<code>
concat(concat(.words/0,.words/1),concat(double(.numbers/single),.words/2)) >> .sentence
</code>

  * The output :

<code php>
object(stdClass)#6 (1) {
  ["sentence"]=>
  string(16) "FromInput2Output"
}
</code>

====== Plugins ======


Transmorph provides a plugin interface to extend its functionalities.

All necessary documentation for development with Transmorph_Plugin_Interface is 
available in the source code documentation, which respects PhpDocumentor format.

This section of the manual explains the purpose and use of ready-to-use plugins 
shipped with Transmorph.

===== The ClassCallback Plugin =====

This plugin class is Transmorph_Plugin_ClassCallback.

This plugin provides support for calling class methods as callbacks in complex 
read-rules.

A class method callback is named by the class name and the method name separated
 by one or two semi-colons.

<code>
Class:method(param1,param2,...)
</code>

Or

<code>
Class::method(param1,param2,...)
</code>

Transmorph_Plugin_ClassCallback will detect if the method to be called is static
 or not in its class. If it is not static, Transmorph_Plugin_ClassCallback will 
try to instantiate the class and call the method on the instantiated object.

NOTICE : 

If the method to call is not static, Transmorph_Plugin_ClassCallback will call 
the constructor of the called class without parameters. The called class' 
constructor MUST NOT have any required parameters, or the callback processing 
will fail. 

==== Example 5 : ClassCallback Plugin ====


  * The input :

<code php>
array(2) {
  ["a"]=>
  int(2)
  ["b"]=>
  int(3)
}
</code>

  * The callbacks

<code php>
class Calc
{

    public function add($a, $b)
    {
        return $a + $b;
    }

    function multiply($a, $b)
    {
        return $a * $b;
    }

}
</code>

  * The rules :

<code>
Calc:add(/a,/b) >> .sum
Calc:multiply(/a,/b) >> .product
</code>

  * The output :

<code php>
object(stdClass)#8 (2) {
  ["sum"]=>
  int(5)
  ["product"]=>
  int(6)
}
</code>

===== The IteratorNode Plugin =====


This plugin class is Transmorph_Plugin_IteratorNode.

This plugin provides dynamic iteration on data structure nodes, to handle 
situations where array size or object attribute list are not predictable.

Where a rule-node must be iterated, the following rule-node must be expressed 
by '#'.

The following read-rule in a transformation rule will make the transformation 
rule processed one time for each key of the array-node.

<code>
array-node/#
</code>

The following read-rule in a transformation rule will make the transformation 
rule processed one time for each public attribute of the object-node.

<code>
object-node.#
</code>

When the linked write-rule has a '#' node, the key or attribute used at each 
iteration is re-used to evaluate the write-rule.

NOTICE :
Only one iteration point is supported. It is not possible so far to encapsulate 
an iteration loop inside another. 

==== Example 6 : IteratorNode Plugin ====


  * The input :

<code php>
array(3) {
  [0]=>
  int(5)
  [1]=>
  int(10)
  [2]=>
  int(15)
}
</code>

The following rules will be equivalent using Transmorph_Plugin_IteratorNode.
<code>
/0 >> .foo/0.bar
/1 >> .foo/1.bar
/2 >> .foo/2.bar
</code>
<code>
/# >> .foo/#.bar
</code>

  * The output :

<code php>
object(stdClass)#6 (1) {
  ["foo"]=>
  array(3) {
    [0]=>
    object(stdClass)#7 (1) {
      ["bar"]=>
      int(5)
    }
    [1]=>
    object(stdClass)#8 (1) {
      ["bar"]=>
      int(10)
    }
    [2]=>
    object(stdClass)#9 (1) {
      ["bar"]=>
      int(15)
    }
  }
}
</code>
