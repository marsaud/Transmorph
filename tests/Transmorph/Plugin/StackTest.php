<?php

//require_once dirname(__FILE__) . '/../../../Transmorph/Plugin/Stack.php';

class TestPlugin1 implements Transmorph_Plugin_Interface
{
    
}

class TestPlugin2 implements Transmorph_Plugin_Interface
{
    
}

class TestPlugin3 implements Transmorph_Plugin_Interface
{
    
}

/**
 * Test class for Transmorph_Plugin_Stack.
 * Generated by PHPUnit on 2011-12-17 at 17:20:30.
 */
class Transmorph_Plugin_StackTest extends PHPUnit_Framework_TestCase
{

    /**
     * @ covers {className}::{origMethodName}
     * @todo Implement testAppendPlugin().
     */
    public function testAppendPlugin()
    {
        $stack = new Transmorph_Plugin_Stack();

        $stack->appendPlugin(new TestPlugin1);
        $expected = array('TestPlugin1');
        foreach ($stack as $plugin)
        {
            $this->assertInstanceOf(array_shift($expected), $plugin);
        }
        $this->assertEmpty($expected);

        $stack->appendPlugin(new TestPlugin2());
        $expected = array('TestPlugin1', 'TestPlugin2');
        foreach ($stack as $plugin)
        {
            $this->assertInstanceOf(array_shift($expected), $plugin);
        }
        $this->assertEmpty($expected);

        return $stack;
    }

    /**
     * @depends testAppendPlugin
     * 
     * @ covers {className}::{origMethodName}
     * @todo Implement testPrependPlugin().
     */
    public function testPrependPlugin(Transmorph_Plugin_Stack $stack)
    {
        $stack->prependPlugin(new TestPlugin3());
        $expected = array('TestPlugin3', 'TestPlugin1', 'TestPlugin2');
        foreach ($stack as $plugin)
        {
            $this->assertInstanceOf(array_shift($expected), $plugin);
        }
        $this->assertEmpty($expected);

        return $stack;
    }

    /**
     * @depends testPrependPlugin
     * 
     * @ covers {className}::{origMethodName}
     * @todo Implement testRemovePlugin().
     */
    public function testRemovePlugin(Transmorph_Plugin_Stack $stack)
    {
        $stack->removePlugin('TestPlugin1');
        $expected = array('TestPlugin3', 'TestPlugin2');
        foreach ($stack as $plugin)
        {
            $this->assertInstanceOf(array_shift($expected), $plugin);
        }
        $this->assertEmpty($expected);

        $stack->removePlugin('TestPlugin3');
        $expected = array('TestPlugin2');
        foreach ($stack as $plugin)
        {
            $this->assertInstanceOf(array_shift($expected), $plugin);
        }
        $this->assertEmpty($expected);

        $stack->removePlugin('TestPlugin2');
        foreach ($stack as $plugin)
        {
            $this->fail('Unexpected way for this test');
        }
    }

    public function testIterator()
    {
        $stack = new Transmorph_Plugin_Stack();

        $expected = array('TestPlugin1', 'TestPlugin2', 'TestPlugin3');
        foreach ($expected as $class)
        {
            $stack->appendPlugin(new $class());
        }
        reset($expected);
        foreach ($stack as $key => $value)
        {
            $this->assertEquals(key($expected), $key);
            $this->assertInstanceOf(current($expected), $value);
            next($expected);
        }
        $this->assertFalse(current($expected));
    }
    
    public function testAppendException()
    {
        $stack = new Transmorph_Plugin_Stack();
        $stack->appendPlugin(new TestPlugin1);
        $this->setExpectedException('Transmorph_Exception');
        $stack->appendPlugin(new TestPlugin1);
    }
    
    public function testPrependException()
    {
        $stack = new Transmorph_Plugin_Stack();
        $stack->prependPlugin(new TestPlugin1);
        $this->setExpectedException('Transmorph_Exception');
        $stack->prependPlugin(new TestPlugin1);
    }
    
    public function testRemoveException()
    {
        $stack = new Transmorph_Plugin_Stack();
        $stack->appendPlugin(new TestPlugin1);
        $this->setExpectedException('Transmorph_Exception');
        $stack->removePlugin('TestPlugin2');
    }

}
