<?php

require_once dirname(__FILE__) . '/../../../Transmorph/Plugin/ClassCallback.php';
require_once dirname(__FILE__) . '/AbstractTest.php';

class Test1
{

    public static function func()
    {
        
    }

}

class Test2
{

    public function func()
    {
        
    }

}

class Test3
{

    public function __construct($optParam = null)
    {
        
    }

    public function func()
    {
        
    }

}

class Test4
{

    public function __construct($reqParam)
    {
        
    }

    public function func()
    {
        
    }

}

function testFunc()
{
    
}

/**
 * Test class for Transmorph_Plugin_ClassCallback.
 * Generated by PHPUnit on 2011-11-25 at 19:52:59.
 */
class Transmorph_Plugin_ClassCallbackTest extends Transmorph_Plugin_AbstractTest
{

    /**
     * @var Transmorph_Plugin_ClassCallback
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Transmorph_Plugin_ClassCallback;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Transmorph_Plugin_ClassCallback::processCallback
     */
    public function testProcessCallback()
    {
        $this->assertEquals(array('Test1', 'func'), $this->object->processCallback(new Transmorph_Processor(), 'Test1::func'));
        $this->assertEquals(array('Test1', 'func'), $this->object->processCallback(new Transmorph_Processor(), 'Test1:func'));
    }

    /**
     * @covers Transmorph_Plugin_ClassCallback::processCallback
     */
    public function testProcessCallback2()
    {
        $this->assertEquals(array(new Test2(), 'func'), $this->object->processCallback(new Transmorph_Processor(), 'Test2::func'));
        $this->assertEquals(array(new Test2(), 'func'), $this->object->processCallback(new Transmorph_Processor(), 'Test2:func'));
    }

    /**
     * @covers Transmorph_Plugin_ClassCallback::processCallback
     */
    public function testProcessCallback3()
    {
        $this->assertEquals(array(new Test3(), 'func'), $this->object->processCallback(new Transmorph_Processor(), 'Test3::func'));
        $this->assertEquals(array(new Test3(), 'func'), $this->object->processCallback(new Transmorph_Processor(), 'Test3:func'));
    }

    /**
     * @covers Transmorph_Plugin_ClassCallback::processCallback
     * @expectedException Transmorph_Exception
     */
    public function testProcessCallback4()
    {
        $this->object->processCallback(new Transmorph_Processor(), 'Test4::func');
    }

    /**
     * @covers Transmorph_Plugin_ClassCallback::processCallback
     * @expectedException ReflectionException
     */
    public function testProcessCallback5()
    {
        $this->object->processCallback(new Transmorph_Processor(), 'Unknown::func');
    }

    /**
     * @covers Transmorph_Plugin_ClassCallback::processCallback
     * @expectedException ReflectionException
     */
    public function testProcessCallback6()
    {
        $this->object->processCallback(new Transmorph_Processor(), 'Test1::unknown');
    }

    /**
     * @covers Transmorph_Plugin_ClassCallback::processCallback
     */
    public function testProcessCallback7()
    {
        $this->assertEquals('testFunc', $this->object->processCallback(new Transmorph_Processor(), 'testFunc'));
    }

    /**
     * @covers Transmorph_Plugin_ClassCallback::processCallback
     * @expectedException Transmorph_Exception
     */
    public function testProcessCallback8()
    {
        $this->object->processCallback(new Transmorph_Processor(), 'too::much::func');
    }

    /**
     * @covers Transmorph_Plugin_ClassCallback::processCallback
     * @expectedException Transmorph_Exception
     */
    public function testProcessCallback9()
    {
        $this->object->processCallback(new Transmorph_Processor(), '::func');
    }

}