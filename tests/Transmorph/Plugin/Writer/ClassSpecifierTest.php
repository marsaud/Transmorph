<?php

require_once SRC_DIR . '/Transmorph/Plugin/Writer/ClassSpecifier.php';

/**
 * Test class for Transmorph_Plugin_Writer_ClassSpecifier.
 * Generated by PHPUnit on 2012-01-19 at 21:23:31.
 */
class Transmorph_Plugin_Writer_ClassSpecifierTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Transmorph_Plugin_Writer_ClassSpecifier
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Transmorph_Plugin_Writer_ClassSpecifier();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @dataProvider processRuleNodeDataProvider
     * 
     * @param type $ruleNode
     * @param type $type
     * @param type $processedRuleNode 
     */
    public function testProcessRuleNode($ruleNode, $type, $processedRuleNode)
    {
        $writer = new Transmorph_Writer();
        $this->assertEquals($processedRuleNode, $this->object->processRuleNode($writer, $ruleNode));
        $this->assertEquals($type, $writer->objectNodeType);
    }

    public function processRuleNodeDataProvider()
    {
        $data = array();

        $data[0] = array('.a', 'stdClass', '.a');
        $data[1] = array('/a', 'stdClass', '/a');
        $data[2] = array('.C:a', 'C', '.a');
        $data[3] = array('.C::a', 'C', '.a');
        $data[4] = array('/', 'stdClass', '/');

        return $data;
    }

    /**
     * @dataProvider processRuleNodeExceptionDataProvider
     * 
     * @param type $ruleNode 
     */
    public function testProcessRuleNodeException($ruleNode)
    {
        $this->setExpectedException('Transmorph_Exception');
        $this->object->processRuleNode(new Transmorph_Writer(), $ruleNode);
    }

    public function processRuleNodeExceptionDataProvider()
    {
        $data = array();

        $data[0] = array('');
        $data[1] = array('a');
        $data[2] = array('1');
        $data[3] = array('_');
        $data[4] = array(null);

        return $data;
    }

    /**
     * @dataProvider postDataProvider
     */
    public function testPost($initialType, $type, $rules)
    {
        $writer = new Transmorph_Writer();
        $writer->objectNodeType = $initialType;

        $this->object->processRuleNode($writer, $rules);
        $this->assertEquals($type, $writer->objectNodeType);

        $this->object->post($writer);
        $this->assertEquals($initialType, $writer->objectNodeType);
    }

    public function postDataProvider()
    {
        $data = array();

        $data[] = array('B', 'C', '.C::a');
        $data[] = array('B', 'C', '.C:a');
        $data[] = array('B', 'B', '.a');

        return $data;
    }

}
