<?php

require_once dirname(__FILE__) . '/../../Transmorph/Writer.php';

/**
 * Test class for Transmorph_Writer.
 * Generated by PHPUnit on 2011-10-23 at 11:53:43.
 */
class Transmorph_WriterTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Transmorph_Writer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Transmorph_Writer;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testConstructor()
    {
        $this->assertTrue($this->object instanceof Transmorph_Writer);
    }

    public function testFeed1()
    {
        $node = null;

        $this->object->feed($node, '', 'a');
        $this->assertEquals('a', $node);

        $this->object->feed($node, '/', 'b');
        $this->assertEquals('b', $node);

        $this->object->feed($node, '.', 'c');
        $this->assertEquals('c', $node);
    }

    public function testFeed2()
    {
        $node = null;

        $this->object->feed($node, '/0', 0);
        $this->assertEquals(0, $node[0]);

        $this->object->feed($node, '/1', 1);
        $this->assertEquals(1, $node[1]);

        $this->object->feed($node, '/a', 2);
        $this->assertEquals(2, $node['a']);
    }

    public function testFeed3()
    {
        $node = null;

        $this->object->feed($node, '.a', 'x');
        $this->assertEquals('x', $node->a);

        $this->object->feed($node, '.b', 'y');
        $this->assertEquals('y', $node->b);
    }

    public function testFeed4()
    {
        $node = null;

        $this->object->feed($node, '.a/0', 'x');
        $this->assertEquals('x', $node->a[0]);

        $this->object->feed($node, '.b/1', 'y');
        $this->assertEquals('y', $node->b[1]);
        $this->assertEquals('x', $node->a[0]);
    }

    public function testFeed5()
    {
        $node = null;

        $this->object->feed($node, '/0.a', 'x');
        $this->assertEquals('x', $node[0]->a);

        $this->object->feed($node, '/1.b', 'y');
        $this->assertEquals('y', $node[1]->b);
        $this->assertEquals('x', $node[0]->a);
    }

    public function testFeed6()
    {
        $node = null;

        $this->object->feed($node, '/0/1', 'x');
        $this->assertEquals('x', $node[0][1]);
        $this->assertEquals(array(1 => 'x'), $node[0]);

        $this->object->feed($node, '/0/2', 'y');
        $this->assertEquals('y', $node[0][2]);
        $this->assertEquals(array(1 => 'x', 2 => 'y'), $node[0]);
    }

    public function testFeed7()
    {
        $node = null;

        $this->object->feed($node, '.a.b', 'x');
        $this->assertEquals('x', $node->a->b);
        $o = new stdClass();
        $o->b = 'x';
        $this->assertEquals($o, $node->a);

        $this->object->feed($node, '.a.c', 'y');
        $this->assertEquals('y', $node->a->c);
        $o = new stdClass();
        $o->c = 'y';
        $o->b = 'x';
        $this->assertEquals($o, $node->a);
    }

    /**
     * @dataProvider feedExceptions1DataProvider
     * @expectedException Transmorph_Writer_Exception
     * @param string $path 
     */
    public function testFeedExceptions1($node, $path)
    {
        $this->object->feed($node, $path, 'x');
    }

    public function feedExceptions1DataProvider()
    {
        $data = array();
        
        $data[0] = array(null, '\a');
        $data[1] = array(null, '\a/');
        $data[2] = array(null, '\a.');
        $data[3] = array(null, 'a');
        
        return $data;
    }
    
    /**
     * @dataProvider feedExceptions2DataProvider
     * @expectedException Transmorph_Writer_Exception
     * @param string $path 
     */
    public function testFeedExceptions2($node, $path)
    {
        $this->object->feed($node, $path, 'x');
    }

    public function feedExceptions2DataProvider()
    {
        $data = array();
        
        $data[0] = array(new stdClass(), '/a');
        $data[1] = array(array(), '.a');
        
        return $data;
    }

}

?>
